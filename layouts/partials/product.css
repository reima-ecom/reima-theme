.product {
  margin: var(--block-margin);
  padding: var(--block-padding);
  max-width: var(--block-width);
}

.product h1 {
  margin-top: 0.625rem;
  margin-bottom: 0.625rem;
}

.product-prices {
  display: flex;
  align-items: center;
}

.product-prices .price--was {
  margin-left: 0.5rem;
}

.product-prices .price {
  font-size: 1rem;
  font-weight: 700;
}

/* review stars are in a div */
.product-prices > div {
  font-size: 1.125rem;
  letter-spacing: 0.5px;
  line-height: 1.5;
  margin-left: auto;
}

.product hr {
  margin: 1rem 0;
}

.product__add-to-cart {
  display: block;
  font-weight: 700;
  width: 100%;
  max-width: 500px;
  margin: var(--content-padding) 0;
}

.product__klarna-banner {
  display: grid;
  margin: calc(var(--content-padding) / -2) 0 var(--content-padding);
  grid-template-columns: max-content 1fr;
  align-items: center;
  gap: 1ch;
}

.product__klarna-banner a {
  white-space: nowrap;
}

.product__payment-logos:not(:empty) {
  text-align: center;
  max-width: 500px;
  margin: calc(var(--content-padding) / -2) 0 var(--content-padding);
}

.product__payment-logos img {
  height: 30px;
  width: auto;
  display: inline;
}

.product-reviews .rating {
  font-size: .875rem;
}

.product-reviews .review-count {
  color: var(--color-text-muted);
}

.size-guide {
  font-size: .875rem;
  margin-bottom: 20px;
}

.size-guide a {
  color: var(--color-text-muted);
  text-decoration-color: var(--color-text-muted);
}

.size-guide a:hover {
  color: var(--color-link);
  text-decoration-color: var(--color-link);
}

.selections {
  margin: 1rem 0;
  border: none;
  padding: 0;
}

.selections legend {
  font-size: 0.875rem;
  font-weight: 700;
  padding: 0;
  margin-bottom: 5px;
}

.selections legend span:not(:empty)::before {
  content: ": ";
}

.selections ul {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  padding: 0;
  /* workaround for one pixel negative margin in label */
  margin: 0 1px 1px 0;
  /* make new stacking context so the label z-index trick
  doesn't result in it showing up over the header */
  position: relative;
  z-index: 0;
}

.selections input {
  position: fixed;
  left: -50px;
  opacity: 0;
}

.selections label.unavailable {
  opacity: 0.5;
  position: relative;
}

.selections label.unavailable::after {
  content: " ";
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  background: center / 100% 100%
    url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'%3E%3Cpath d='M100 0 L0 100' stroke='rgb(0,0,0)' stroke-width='1'/%3E%3Cpath d='M0 0 L100 100' stroke='rgb(0,0,0)' stroke-width='1'/%3E%3C/svg%3E ");
}

.selections label {
  display: block;
  position: relative;
  cursor: pointer;
  border: 1px solid var(--color-border);
  margin: 0 -1px -1px 0;
  padding: 0.6875rem 0.5rem;
  box-sizing: border-box;
  min-width: 50px;
  text-align: center;
}

.selections input:focus + label {
  outline: var(--focus-outline);
}

.selections input:checked + label {
  background-color: var(--color-bg-inverted);
  border-color: var(--color-bg-inverted);
  color: var(--color-text-inverted);
  z-index: 1;
}

.selections--Color ul {
  margin: -5px 0 0 -5px;
}

.selections--Color li {
  margin: 5px 0 0 5px;
}

.selections--Color label {
  border-radius: 50%;
  width: 2rem;
  height: 2rem;
  overflow: hidden;
  /* needed in order to make image go under box-shadow */
  position: relative;
  /* reset */
  padding: 0;
  min-width: 0;
  color: inherit;
  z-index: unset;
}

.selections--Color label span {
  display: none;
}

.selections--Color label img {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: -1;
}

.selections--Color input:checked + label {
  border-color: inherit;
  box-shadow: inset 0 0 0 2px #fff;
  color: inherit;
  z-index: unset;
  background-color: unset;
}

@media (min-width: 768px) {
  .product {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--content-padding);
  }
}

/* #region read-more toggle */

/*
We want to show the read more link under the contents when opened.
That's why we set `display:contents` and then show the contents
manually with CSS. The `[open]` attribute is still set on the
`details` elements, so we can use that for styling.
*/

.read-more {
  display: contents;
}

.read-more > *:not(summary) {
  display: none;
}

.read-more[open] > *:not(summary) {
  display: block;
}

.read-more summary {
  display: inline;
}

.read-more summary::-webkit-details-marker,
.read-more summary::marker {
  display: none;
  content: "";
}

.read-more .less {
  display: none;
}

.read-more[open] .less {
  display: unset;
}

.read-more[open] .more {
  display: none;
}

/* #endregion */

/* styles applicable to all views */
.tabs {
  border-bottom: var(--border);
  margin: var(--block-margin);
}

.tabs ul {
  padding-left: 1rem;
}

/* hide labels */
.tab > label {
  display: none;
}

/* ... but show the accordion label */
.tab > label[for|=acc] {
  display: block;
  cursor: pointer;
  color: inherit;
  border-top: var(--border);
  font-size: var(--text-font-size);
  font-weight: 700;
  padding: var(--content-padding);
}

/* same for inputs */
.tab > input {
  display: none;
}

.tab > input[id|=acc] {
  display: block;
  position: absolute;
  opacity: 0;
}

.tab > aside {
  display: none;
}

.tab > input[name|=acc]:checked ~ label[for|=acc] {
  color: var(--color-bg);
  background: var(--color-fg);
}

.tab > input[name|=acc]:checked ~ aside {
  display: block;
  padding: var(--content-padding)
    max(var(--content-padding), (100% - var(--block-width)) / 2);
}

/* desktop styles */
@media (min-width: 768px) {
  .tabs {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    /* create stacking context so tabs don't appear above header */
    position: relative;
    z-index: 0;
  }

  /* remove .tab element from cssom to layout properly */
  .tab {
    display: contents;
  }

  /* hide asides possibly opened on mobile */
  .tab > input[id|=acc]:checked ~ aside {
    display: none;
  }

  /* hide and show appropriate labels and inputs */
  .tab > input[id|=acc] {
    display: none;
  }

  .tab > input {
    display: block;
    position: absolute;
    opacity: 0;
  }

  .tab > label[for|=acc] {
    display: none;
  }

  .tab > label {
    display: block;
    border: 1px solid var(--color-border);
    border-top-left-radius: 2px;
    border-top-right-radius: 2px;
    color: var(--color-text-muted);
    margin: 0 0.25rem -1px;
    padding: 0.8125rem;
    font-size: 0.875rem;
    font-weight: normal;
    cursor: pointer;
  }

  .tab > input[name=tab]:checked ~ aside {
    border-top: var(--border);
    width: 100%;
    order: 1;
    display: grid;
    justify-content: center;
    grid-auto-columns: minmax(33%,50%);
    grid-auto-flow: column;
    gap: var(--content-padding);
    padding: var(--content-padding)
      max(var(--content-padding), (100% - var(--block-width)) / 2);
  }

  /* create the vertical line between grid items */
  .tab > aside > :nth-child(n+2) {
    position: relative;
  }

  .tab > aside > :nth-child(n+2)::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(-0.5 * var(--content-padding));
    height: 100%;
    border-left: var(--border);
  }

  /* remove margins from within the aside */
  .tab > aside > * > :last-child {
        margin-bottom: 0;
  }

  .tab > aside > * > :first-child {
        margin-top: 0;
  }

  /* style label focus and checked states */
  .tab > input[name=tab]:focus ~ label {
    outline: var(--focus-outline);
  }

  .tab > input[name=tab]:checked ~ label {
    color: var(--color-text);
    border-color: var(--color-border);
    border-bottom-color: white;
    z-index: 1;
  }

  .size-guide {
    margin: 24px 0 -6px 0;
  }

  .product h1 {
    margin-top: 0;
  }
}

.features__heading {
  display: inline-block;
  margin: 0 0 1rem;
  font-weight: 700;
  font-size: inherit;
}

.features__heading a {
  border-bottom: none;
}

.features__heading a::after {
  content: "i";
  width: 1rem;
  height: 1rem;
  display: inline-flex;
  line-height: 1;
  justify-content: center;
  color: white;
  background: var(--color-primary);
  border-radius: 50%;
  font-size: 0.75em;
  align-items: center;
  text-align: center;
  margin-left: 0.25rem;
}

.features > div > a:hover {
  color: var(--color-link);
}

.features > svg {
  width: 50px;
}

.features > svg + svg {
  margin-left: 0.25rem;
}

.features > svg,
.features > svg path {
  fill: var(--color-text-muted) !important;
}

.features svg.active,
.features svg.active path {
  fill: var(--color-text) !important;
}

.features p {
  margin-top: 0.25rem;
}
